// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/calculate/calculate.proto

package calculate

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	client "github.com/smallnest/rpcx/client"
	protocol "github.com/smallnest/rpcx/protocol"
	server "github.com/smallnest/rpcx/server"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// The request message containing the user's name.
type CalRequest struct {
	X                    int64    `protobuf:"varint,1,opt,name=x,proto3" json:"x,omitempty"`
	Y                    int64    `protobuf:"varint,2,opt,name=y,proto3" json:"y,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CalRequest) Reset()         { *m = CalRequest{} }
func (m *CalRequest) String() string { return proto.CompactTextString(m) }
func (*CalRequest) ProtoMessage()    {}
func (*CalRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_af806f05876bfd7f, []int{0}
}
func (m *CalRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CalRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CalRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CalRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CalRequest.Merge(m, src)
}
func (m *CalRequest) XXX_Size() int {
	return m.Size()
}
func (m *CalRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CalRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CalRequest proto.InternalMessageInfo

func (m *CalRequest) GetX() int64 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *CalRequest) GetY() int64 {
	if m != nil {
		return m.Y
	}
	return 0
}

// The response message containing the greetings
type CalReply struct {
	R                    int64    `protobuf:"varint,1,opt,name=r,proto3" json:"r,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CalReply) Reset()         { *m = CalReply{} }
func (m *CalReply) String() string { return proto.CompactTextString(m) }
func (*CalReply) ProtoMessage()    {}
func (*CalReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_af806f05876bfd7f, []int{1}
}
func (m *CalReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CalReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CalReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CalReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CalReply.Merge(m, src)
}
func (m *CalReply) XXX_Size() int {
	return m.Size()
}
func (m *CalReply) XXX_DiscardUnknown() {
	xxx_messageInfo_CalReply.DiscardUnknown(m)
}

var xxx_messageInfo_CalReply proto.InternalMessageInfo

func (m *CalReply) GetR() int64 {
	if m != nil {
		return m.R
	}
	return 0
}

func init() {
	proto.RegisterType((*CalRequest)(nil), "calculate.CalRequest")
	proto.RegisterType((*CalReply)(nil), "calculate.CalReply")
}

func init() { proto.RegisterFile("proto/calculate/calculate.proto", fileDescriptor_af806f05876bfd7f) }

var fileDescriptor_af806f05876bfd7f = []byte{
	// 177 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x2f, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0x4f, 0x4e, 0xcc, 0x49, 0x2e, 0xcd, 0x49, 0x2c, 0x49, 0x45, 0xb0, 0xf4, 0xc0, 0x32,
	0x42, 0x9c, 0x70, 0x01, 0x25, 0x0d, 0x2e, 0x2e, 0xe7, 0xc4, 0x9c, 0xa0, 0xd4, 0xc2, 0xd2, 0xd4,
	0xe2, 0x12, 0x21, 0x1e, 0x2e, 0xc6, 0x0a, 0x09, 0x46, 0x05, 0x46, 0x0d, 0xe6, 0x20, 0xc6, 0x0a,
	0x10, 0xaf, 0x52, 0x82, 0x09, 0xc2, 0xab, 0x54, 0x92, 0xe0, 0xe2, 0x00, 0xab, 0x2c, 0xc8, 0xa9,
	0x04, 0xc9, 0x14, 0xc1, 0xd4, 0x15, 0x19, 0xdd, 0x67, 0xe4, 0xe2, 0x74, 0x86, 0x99, 0x28, 0x64,
	0xcc, 0xc5, 0xec, 0x98, 0x92, 0x22, 0x24, 0xaa, 0x87, 0xb0, 0x15, 0x61, 0x83, 0x94, 0x30, 0xba,
	0x70, 0x41, 0x4e, 0xa5, 0x12, 0x03, 0x48, 0x53, 0x70, 0x69, 0x12, 0xe9, 0x9a, 0x7c, 0x4b, 0x73,
	0x48, 0xd7, 0xe4, 0x92, 0x59, 0x46, 0x9a, 0x26, 0x27, 0xe9, 0x13, 0x8f, 0xe4, 0x18, 0x2f, 0x3c,
	0x92, 0x63, 0x7c, 0xf0, 0x48, 0x8e, 0x71, 0xc6, 0x63, 0x39, 0x86, 0x28, 0x44, 0x10, 0x26, 0xb1,
	0x81, 0x03, 0xd5, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x39, 0x19, 0xd4, 0xd6, 0x77, 0x01, 0x00,
	0x00,
}

func (m *CalRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CalRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CalRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Y != 0 {
		i = encodeVarintCalculate(dAtA, i, uint64(m.Y))
		i--
		dAtA[i] = 0x10
	}
	if m.X != 0 {
		i = encodeVarintCalculate(dAtA, i, uint64(m.X))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CalReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CalReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CalReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.R != 0 {
		i = encodeVarintCalculate(dAtA, i, uint64(m.R))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintCalculate(dAtA []byte, offset int, v uint64) int {
	offset -= sovCalculate(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

// This following code was generated by rpcx
// Gernerated from proto/calculate/calculate.proto

//================== server skeleton===================
type CalculateImpl struct{}

// ServeForCalculate starts a server only registers one service.
// You can register more services and only start one server.
// It blocks until the application exits.
func ServeForCalculate(addr string) error {
	s := server.NewServer()
	s.RegisterName("Calculate", new(CalculateImpl), "")
	return s.Serve("tcp", addr)
}

// Add is server rpc method as defined
func (s *CalculateImpl) Add(ctx context.Context, args *CalRequest, reply *CalReply) (err error) {
	// TODO: add business logics

	// TODO: setting return values
	*reply = CalReply{}

	return nil
}

// Sub is server rpc method as defined
func (s *CalculateImpl) Sub(ctx context.Context, args *CalRequest, reply *CalReply) (err error) {
	// TODO: add business logics

	// TODO: setting return values
	*reply = CalReply{}

	return nil
}

// Mul is server rpc method as defined
func (s *CalculateImpl) Mul(ctx context.Context, args *CalRequest, reply *CalReply) (err error) {
	// TODO: add business logics

	// TODO: setting return values
	*reply = CalReply{}

	return nil
}

// Div is server rpc method as defined
func (s *CalculateImpl) Div(ctx context.Context, args *CalRequest, reply *CalReply) (err error) {
	// TODO: add business logics

	// TODO: setting return values
	*reply = CalReply{}

	return nil
}

//================== client stub===================
// Calculate is a client wrapped XClient.
type CalculateClient struct {
	xclient client.XClient
}

// NewCalculateClient wraps a XClient as CalculateClient.
// You can pass a shared XClient object created by NewXClientForCalculate.
func NewCalculateClient(xclient client.XClient) *CalculateClient {
	return &CalculateClient{xclient: xclient}
}

// NewXClientForCalculate creates a XClient.
// You can configure this client with more options such as etcd registry, serialize type, select algorithm and fail mode.
func NewXClientForCalculate(addr string) client.XClient {
	d := client.NewPeer2PeerDiscovery("tcp@"+addr, "")
	opt := client.DefaultOption
	opt.SerializeType = protocol.ProtoBuffer

	xclient := client.NewXClient("Calculate", client.Failtry, client.RoundRobin, d, opt)
	return xclient
}

// Add is client rpc method as defined
func (c *CalculateClient) Add(ctx context.Context, args *CalRequest) (reply *CalReply, err error) {
	reply = &CalReply{}
	err = c.xclient.Call(ctx, "Add", args, reply)
	return reply, err
}

// Sub is client rpc method as defined
func (c *CalculateClient) Sub(ctx context.Context, args *CalRequest) (reply *CalReply, err error) {
	reply = &CalReply{}
	err = c.xclient.Call(ctx, "Sub", args, reply)
	return reply, err
}

// Mul is client rpc method as defined
func (c *CalculateClient) Mul(ctx context.Context, args *CalRequest) (reply *CalReply, err error) {
	reply = &CalReply{}
	err = c.xclient.Call(ctx, "Mul", args, reply)
	return reply, err
}

// Div is client rpc method as defined
func (c *CalculateClient) Div(ctx context.Context, args *CalRequest) (reply *CalReply, err error) {
	reply = &CalReply{}
	err = c.xclient.Call(ctx, "Div", args, reply)
	return reply, err
}

func (m *CalRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.X != 0 {
		n += 1 + sovCalculate(uint64(m.X))
	}
	if m.Y != 0 {
		n += 1 + sovCalculate(uint64(m.Y))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CalReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.R != 0 {
		n += 1 + sovCalculate(uint64(m.R))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovCalculate(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCalculate(x uint64) (n int) {
	return sovCalculate(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CalRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCalculate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CalRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CalRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field X", wireType)
			}
			m.X = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalculate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.X |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Y", wireType)
			}
			m.Y = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalculate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Y |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCalculate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCalculate
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCalculate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CalReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCalculate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CalReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CalReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field R", wireType)
			}
			m.R = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalculate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.R |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCalculate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCalculate
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCalculate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCalculate(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCalculate
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCalculate
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCalculate
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCalculate
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCalculate
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCalculate
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCalculate        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCalculate          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCalculate = fmt.Errorf("proto: unexpected end of group")
)
